<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" 
	"http://ibatis.apache.org/dtd/sql-map-2.dtd">
 
<sqlMap namespace="questions">
	<select id="getQuestionByNo" parameterClass="int" resultClass="com.community.vo.Question">
		select
			A.post_no	as postNo,
			A.post_board_no	as "board.no",
			A.post_title	as title,
			A.post_writer_no	as "employee.empNo",
			B.emp_name	as "employee.name",
			C.position_name	as "position.name",
			D.department_name	as "department.name",
			A.post_content	as content,
			A.post_important	as important,
			A.post_read_count	as readCount,
			A.post_suggestion_count	as suggestionCount,
			A.post_comment_count	as commentCount,
			A.post_deleted	as deleted,
			A.post_created_date	as createdDate,
			A.post_updated_date	as updatedDate,
			A.post_deleted_date	as deletedDate,
			A.post_original_no	as originalNo
		from
			comm_posts A, comm_employees B, comm_positions C, comm_departments D
		where
			A.post_board_no = 104
			and A.post_no = #value#
			and A.post_writer_no = B.emp_no
			and B.emp_position_no = C.position_no
			and B.emp_dept_no = D.department_no
	</select>
	
	<select id="getTotalRows" resultClass="int">
		select
			count(*)
		from
			comm_posts
		where
			post_deleted = 'N'
			and post_board_no = 104
			<dynamic>
				<isNotNull property="opt">
					<isEqual property="opt" compareValue="title">
						and post_title like '%' || #keyword# || '%'
					</isEqual>
					<isEqual property="opt" compareValue="writer">
						and post_writer_no in (select emp_no
											   from comm_employees
											   where emp_name = #keyword#)
					</isEqual>
					<isEqual property="opt" compareValue="content">
						and post_content like '%' || #keyword# || '%'
					</isEqual>
				</isNotNull>
			</dynamic>
	</select>
	
	<select id="getQuestions" parameterClass="map" resultClass="com.community.vo.Question">
		select
			A.post_no	as postNo,
			A.post_board_no	as "board.no",
			A.post_title	as title,
			A.post_writer_no	as "employee.empNo",
			B.emp_name	as "employee.name",
			A.post_content	as content,
			A.post_important	as important,
			A.post_read_count	as readCount,
			A.post_suggestion_count		as suggestionCount,
			A.post_comment_count	as commentCount,
			A.post_deleted	as deleted,
			A.post_created_date	as createdDate,
			A.post_updated_date	as updatedDate,
			A.post_deleted_date	as deletedDate,
			A.post_original_no	as originalNo
		from
			(select
				row_number() over (order by post_no desc) row_numbers,
				post_no,
				post_board_no,
				post_title,
				post_writer_no,
				post_content,
				post_important,
				post_read_count,
				post_suggestion_count,
				post_comment_count,
				post_deleted,
				post_created_date,
				post_updated_date,
				post_deleted_date,
				post_original_no
			 from
			 	comm_posts
			 where
			 	post_deleted = 'N'
				and post_board_no = 104
				<dynamic>
					<isNotNull property="opt">
						<isEqual property="opt" compareValue="title">
							and post_title like '%' || #keyword# || '%'
						</isEqual>
						<isEqual property="opt" compareValue="writer">
							and post_writer_no in (select emp_no
												   from comm_employees
												   where emp_name = #keyword#)
						</isEqual>
						<isEqual property="opt" compareValue="content">
							and post_content like '%' || #keyword# || '%'
						</isEqual>
					</isNotNull>
				</dynamic>
			) A, comm_employees B
		where
			A.row_numbers between #begin# and #end#
			and A.post_writer_no = B.emp_no
	</select>
	
	<update id="updateQuestion" parameterClass="com.community.vo.Question">
		update
			comm_posts
		set
			post_title = #title#,
			post_content = #content#,
			post_important = #important#,
			post_read_count = #readCount#,
			post_suggestion_count = #suggestionCount#,
			post_comment_count = #commentCount#,
			post_deleted = #deleted#,
			post_updated_date = sysdate,
			post_deleted_date = sysdate
		where
			post_no = #postNo#
	</update>
</sqlMap>

